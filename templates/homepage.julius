
Array.from(
  document.querySelectorAll('time.full-datetime[datetime]')
).forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleDateString(
    navigator.language,
    { year: 'numeric',
      month: 'short',
      weekday: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    }
  );
});

Array.from(
  document.querySelectorAll('time.day[datetime]')
).forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleDateString(
    navigator.language,
    { year: 'numeric',
      month: 'short',
      day: 'numeric'
    }
  );
});


document.getElementById(#{idButtonUpcomingEvents}).addEventListener('click', e => {
  e.preventDefault();
  document.getElementById(#{idOverlay}).classList.add('active');
  document.getElementById(#{idDialogUpcomingEvents}).show();
});

document.getElementById(#{idButtonCloseDialogUpcomingEvents}).addEventListener('click', e => {
  document.getElementById(#{idOverlay}).classList.remove('active');
  document.getElementById(#{idDialogUpcomingEvents}).close();
});


document.getElementById(#{idButtonSearchEvents}).addEventListener('click', e => {
  e.preventDefault();
  document.getElementById(#{idOverlay}).classList.add('active');
  document.getElementById(#{idDialogSearchEvents}).show();
});

document.getElementById(#{idButtonCloseDialogSearchEvents}).addEventListener('click', e => {
  document.getElementById(#{idOverlay}).classList.remove('active');
  document.getElementById(#{idDialogSearchEvents}).close();
});


const searchSheet = document.getElementById(#{idDialogSearchEvents});
const listSearch = document.getElementById(#{idListSearchSearchEventsResult});

document.getElementById(#{idInputSearchEvents}).addEventListener('input', debounce( function (e) {

  listSearch.replaceChildren(progress());
  
  fetch(new URL(`@{ApiEventsR}?q=${e.target.value}`).href,{
    headers: {'Accept': 'application/json'}
  }).then(data => data.json()).then(function (events) {

    if (events.length > 0) {

      listSearch.replaceChildren( ... events.flatMap(([x,attendees]) => {
        const item = document.createElement('a');
        item.href = `/events/${x.id}`;
        item.className = 'row padding surface-container wave';

        const start = document.createElement('img');
        start.className = 'large round';
        start.setAttribute('src',`/events/${x.id}/poster`);
        start.setAttribute('loading','lazy');
        start.setAttribute('alt',#{msgr MsgPoster});

        const content = document.createElement('div');
        content.className = 'content max';

        const headline = document.createElement('h6');
        headline.className = 'headline large-text';
        headline.textContent = x.name;

        const supporting = document.createElement('time');
        supporting.className = 'full-datetime supporting-text small-text';
        supporting.datetime = x.time;
        supporting.textContent = new Date(x.time).toLocaleDateString(
          navigator.language,
          { year: 'numeric',
            month: 'short',
            weekday: 'short',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric'
          }
        );

        const thirdLine = document.createElement('div');
        thirdLine.className = 'supporting-text small-text';
        thirdLine.textContent = `#{rawJS $ msgr MsgAttendees}: ${attendees}`;

        const end = document.createElement('i');
        end.textContent = 'arrow_forward_ios';

        content.appendChild(headline);
        content.appendChild(supporting);
        content.appendChild(thirdLine);

        item.appendChild(start);
        item.appendChild(content);
        item.appendChild(end);

        const divider = document.createElement('hr');
        return [item,divider];

      }));

    } else {

      listSearch.replaceChildren((() => {
        const msg = document.createElement('div');
        msg.className = 'italic padding';
        msg.textContent = #{msgr MsgNoEventsFound};
        return msg;
      })());

    }

  });
  
}, 500));


[ [#{idDialogSearchEvents}, #{idListSearchSearchEventsResult}]
].map(
  xs => xs.map(x => document.getElementById(x))
).map(
  ([dlg,list]) => [dlg,list,dlg.querySelector('[draggable=true]')]
).forEach(([sheet,list,draggable]) => {

  draggable.addEventListener('dragstart', e => {
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('drag', e => {
    const h = `${window.innerHeight - e.clientY + 32}px`;
    list.style.height = `calc(${h}  - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('dragend', e => {
    const h = `${window.innerHeight - e.clientY + 32}px`;
    list.style.height = `calc(${h} - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('touchstart', e => {
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('touchmove', e => {
    const h = `${window.innerHeight - e.touches.item(0).clientY + 32}px`;
    list.style.height = `calc(${h} - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });

});
